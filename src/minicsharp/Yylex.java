/* The following code was generated by JFlex 1.6.1 */

package minicsharp;
import java.io.*;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/diego/Desktop/MiniCSharp-master (copy)/MiniCSharp/src/minicsharp/Lexer.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\3\1\11\1\11\1\10\16\0\4\0\1\12\1\25"+
    "\1\37\1\0\1\0\1\21\1\26\1\0\1\33\1\34\1\2\1\17"+
    "\1\7\1\20\1\30\1\1\1\13\11\6\1\0\1\27\1\22\1\23"+
    "\1\24\2\0\1\55\1\76\2\15\1\47\1\54\1\75\4\0\1\56"+
    "\5\0\1\45\1\57\1\44\1\46\2\0\1\16\2\0\1\31\1\0"+
    "\1\32\1\0\1\0\1\0\1\51\1\5\1\66\1\63\1\43\1\50"+
    "\1\65\1\67\1\62\1\0\1\73\1\52\1\70\1\64\1\61\1\71"+
    "\1\0\1\41\1\53\1\40\1\42\1\60\1\72\1\14\1\74\1\0"+
    "\1\35\1\4\1\36\1\0\6\0\1\11\32\0\1\11\1\0\4\0"+
    "\4\0\1\0\2\0\1\0\7\0\1\0\4\0\1\0\5\0\27\0"+
    "\1\0\37\0\1\0\u01ca\0\4\0\14\0\16\0\5\0\7\0\1\0"+
    "\1\0\1\0\21\0\160\0\5\0\1\0\2\0\2\0\4\0\10\0"+
    "\1\0\1\0\3\0\1\0\1\0\1\0\24\0\1\0\123\0\1\0"+
    "\213\0\1\0\5\0\2\0\236\0\11\0\46\0\2\0\1\0\7\0"+
    "\47\0\7\0\1\0\1\0\55\0\1\0\1\0\1\0\2\0\1\0"+
    "\2\0\1\0\1\0\10\0\33\0\5\0\3\0\15\0\5\0\6\0"+
    "\1\0\4\0\13\0\5\0\53\0\37\0\4\0\2\0\1\0\143\0"+
    "\1\0\1\0\10\0\1\0\6\0\2\0\2\0\1\0\4\0\2\0"+
    "\12\0\3\0\2\0\1\0\17\0\1\0\1\0\1\0\36\0\33\0"+
    "\2\0\131\0\13\0\1\0\16\0\12\0\41\0\11\0\2\0\4\0"+
    "\1\0\5\0\26\0\4\0\1\0\11\0\1\0\3\0\1\0\5\0"+
    "\22\0\31\0\3\0\104\0\1\0\1\0\13\0\67\0\33\0\1\0"+
    "\4\0\66\0\3\0\1\0\22\0\1\0\7\0\12\0\2\0\2\0"+
    "\12\0\1\0\7\0\1\0\7\0\1\0\3\0\1\0\10\0\2\0"+
    "\2\0\2\0\26\0\1\0\7\0\1\0\1\0\3\0\4\0\2\0"+
    "\1\0\1\0\7\0\2\0\2\0\2\0\3\0\1\0\10\0\1\0"+
    "\4\0\2\0\1\0\3\0\2\0\2\0\12\0\4\0\7\0\1\0"+
    "\5\0\3\0\1\0\6\0\4\0\2\0\2\0\26\0\1\0\7\0"+
    "\1\0\2\0\1\0\2\0\1\0\2\0\2\0\1\0\1\0\5\0"+
    "\4\0\2\0\2\0\3\0\3\0\1\0\7\0\4\0\1\0\1\0"+
    "\7\0\14\0\3\0\1\0\13\0\3\0\1\0\11\0\1\0\3\0"+
    "\1\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0\1\0"+
    "\1\0\10\0\1\0\3\0\1\0\3\0\2\0\1\0\17\0\2\0"+
    "\2\0\2\0\12\0\1\0\1\0\17\0\3\0\1\0\10\0\2\0"+
    "\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0"+
    "\1\0\1\0\7\0\2\0\2\0\2\0\3\0\10\0\2\0\4\0"+
    "\2\0\1\0\3\0\2\0\2\0\12\0\1\0\1\0\20\0\1\0"+
    "\1\0\1\0\6\0\3\0\3\0\1\0\4\0\3\0\2\0\1\0"+
    "\1\0\1\0\2\0\3\0\2\0\3\0\3\0\3\0\14\0\4\0"+
    "\5\0\3\0\3\0\1\0\4\0\2\0\1\0\6\0\1\0\16\0"+
    "\12\0\11\0\1\0\7\0\3\0\1\0\10\0\1\0\3\0\1\0"+
    "\27\0\1\0\12\0\1\0\5\0\3\0\1\0\7\0\1\0\3\0"+
    "\1\0\4\0\7\0\2\0\1\0\2\0\6\0\2\0\2\0\2\0"+
    "\12\0\22\0\2\0\1\0\10\0\1\0\3\0\1\0\27\0\1\0"+
    "\12\0\1\0\5\0\2\0\1\0\1\0\7\0\1\0\3\0\1\0"+
    "\4\0\7\0\2\0\7\0\1\0\1\0\2\0\2\0\2\0\12\0"+
    "\1\0\2\0\17\0\2\0\1\0\10\0\1\0\3\0\1\0\51\0"+
    "\2\0\1\0\7\0\1\0\3\0\1\0\4\0\1\0\10\0\1\0"+
    "\10\0\2\0\2\0\2\0\12\0\12\0\6\0\2\0\2\0\1\0"+
    "\22\0\3\0\30\0\1\0\11\0\1\0\1\0\2\0\7\0\3\0"+
    "\1\0\4\0\6\0\1\0\1\0\1\0\10\0\22\0\2\0\15\0"+
    "\60\0\1\0\2\0\7\0\4\0\10\0\10\0\1\0\12\0\47\0"+
    "\2\0\1\0\1\0\2\0\2\0\1\0\1\0\2\0\1\0\6\0"+
    "\4\0\1\0\7\0\1\0\3\0\1\0\1\0\1\0\1\0\2\0"+
    "\2\0\1\0\4\0\1\0\2\0\6\0\1\0\2\0\1\0\2\0"+
    "\5\0\1\0\1\0\1\0\6\0\2\0\12\0\2\0\4\0\40\0"+
    "\1\0\27\0\2\0\6\0\12\0\13\0\1\0\1\0\1\0\1\0"+
    "\1\0\4\0\2\0\10\0\1\0\44\0\4\0\24\0\1\0\2\0"+
    "\5\0\13\0\1\0\44\0\11\0\1\0\71\0\53\0\24\0\1\0"+
    "\12\0\6\0\6\0\4\0\4\0\3\0\1\0\3\0\2\0\7\0"+
    "\3\0\4\0\15\0\14\0\1\0\17\0\2\0\46\0\1\0\1\0"+
    "\5\0\1\0\2\0\53\0\1\0\u014d\0\1\0\4\0\2\0\7\0"+
    "\1\0\1\0\1\0\4\0\2\0\51\0\1\0\4\0\2\0\41\0"+
    "\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0\17\0"+
    "\1\0\71\0\1\0\4\0\2\0\103\0\2\0\3\0\40\0\20\0"+
    "\20\0\125\0\14\0\u026c\0\2\0\21\0\1\11\32\0\5\0\113\0"+
    "\3\0\3\0\17\0\15\0\1\0\4\0\3\0\13\0\22\0\3\0"+
    "\13\0\22\0\2\0\14\0\15\0\1\0\3\0\1\0\2\0\14\0"+
    "\64\0\40\0\3\0\1\0\3\0\2\0\1\0\2\0\12\0\41\0"+
    "\3\0\2\0\12\0\6\0\130\0\10\0\51\0\1\0\1\0\5\0"+
    "\106\0\12\0\35\0\3\0\14\0\4\0\14\0\12\0\12\0\36\0"+
    "\2\0\5\0\13\0\54\0\4\0\21\0\7\0\2\0\6\0\12\0"+
    "\46\0\27\0\5\0\4\0\65\0\12\0\1\0\35\0\2\0\13\0"+
    "\6\0\12\0\15\0\1\0\130\0\5\0\57\0\21\0\7\0\4\0"+
    "\12\0\21\0\11\0\14\0\3\0\36\0\15\0\2\0\12\0\54\0"+
    "\16\0\14\0\44\0\24\0\10\0\12\0\3\0\3\0\12\0\44\0"+
    "\122\0\3\0\1\0\25\0\4\0\1\0\4\0\3\0\2\0\11\0"+
    "\300\0\47\0\25\0\4\0\u0116\0\2\0\6\0\2\0\46\0\2\0"+
    "\6\0\2\0\10\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\37\0\2\0\65\0\1\0\7\0\1\0\1\0\3\0\3\0\1\0"+
    "\7\0\3\0\4\0\2\0\6\0\4\0\15\0\5\0\3\0\1\0"+
    "\7\0\3\0\13\11\5\0\30\0\1\11\1\11\5\0\1\11\17\0"+
    "\2\0\23\0\1\0\12\0\1\11\5\0\5\0\6\0\1\0\1\0"+
    "\15\0\1\0\20\0\15\0\3\0\33\0\25\0\15\0\4\0\1\0"+
    "\3\0\14\0\21\0\1\0\4\0\1\0\2\0\12\0\1\0\1\0"+
    "\3\0\5\0\6\0\1\0\1\0\1\0\1\0\1\0\1\0\4\0"+
    "\1\0\13\0\2\0\4\0\5\0\5\0\4\0\1\0\21\0\51\0"+
    "\u0a77\0\57\0\1\0\57\0\1\0\205\0\6\0\4\0\3\0\2\0"+
    "\14\0\46\0\1\0\1\0\5\0\1\0\2\0\70\0\7\0\1\0"+
    "\17\0\1\0\27\0\11\0\7\0\1\0\7\0\1\0\7\0\1\0"+
    "\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0"+
    "\40\0\57\0\1\0\u01d0\0\1\11\4\0\3\0\31\0\11\0\6\0"+
    "\1\0\5\0\2\0\5\0\4\0\126\0\2\0\2\0\2\0\3\0"+
    "\1\0\132\0\1\0\4\0\5\0\51\0\3\0\136\0\21\0\33\0"+
    "\65\0\20\0\u0200\0\u19b6\0\112\0\u51cd\0\63\0\u048d\0\103\0\56\0"+
    "\2\0\u010d\0\3\0\20\0\12\0\2\0\24\0\57\0\1\0\4\0"+
    "\12\0\1\0\31\0\7\0\1\0\120\0\2\0\45\0\11\0\2\0"+
    "\147\0\2\0\4\0\1\0\4\0\14\0\13\0\115\0\12\0\1\0"+
    "\3\0\1\0\4\0\1\0\27\0\5\0\20\0\1\0\7\0\64\0"+
    "\14\0\2\0\62\0\21\0\13\0\12\0\6\0\22\0\6\0\3\0"+
    "\1\0\4\0\12\0\34\0\10\0\2\0\27\0\15\0\14\0\35\0"+
    "\3\0\4\0\57\0\16\0\16\0\1\0\12\0\46\0\51\0\16\0"+
    "\11\0\3\0\1\0\10\0\2\0\2\0\12\0\6\0\27\0\3\0"+
    "\1\0\1\0\4\0\60\0\1\0\1\0\3\0\2\0\2\0\5\0"+
    "\2\0\1\0\1\0\1\0\30\0\3\0\2\0\13\0\5\0\2\0"+
    "\3\0\2\0\12\0\6\0\2\0\6\0\2\0\6\0\11\0\7\0"+
    "\1\0\7\0\221\0\43\0\10\0\1\0\2\0\2\0\12\0\6\0"+
    "\u2ba4\0\14\0\27\0\4\0\61\0\u2104\0\u016e\0\2\0\152\0\46\0"+
    "\7\0\14\0\5\0\5\0\1\0\1\0\12\0\1\0\15\0\1\0"+
    "\5\0\1\0\1\0\1\0\2\0\1\0\2\0\1\0\154\0\41\0"+
    "\u016b\0\22\0\100\0\2\0\66\0\50\0\15\0\3\0\20\0\20\0"+
    "\7\0\14\0\2\0\30\0\3\0\31\0\1\0\6\0\5\0\1\0"+
    "\207\0\2\0\1\0\4\0\1\0\13\0\12\0\7\0\32\0\4\0"+
    "\1\0\1\0\32\0\13\0\131\0\3\0\6\0\2\0\6\0\2\0"+
    "\6\0\2\0\3\0\3\0\2\0\3\0\2\0\22\0\3\0\4\0"+
    "\14\0\1\0\32\0\1\0\23\0\1\0\2\0\1\0\17\0\2\0"+
    "\16\0\42\0\173\0\105\0\65\0\210\0\1\0\202\0\35\0\3\0"+
    "\61\0\57\0\37\0\21\0\33\0\65\0\36\0\2\0\44\0\4\0"+
    "\10\0\1\0\5\0\52\0\236\0\2\0\12\0\u0356\0\6\0\2\0"+
    "\1\0\1\0\54\0\1\0\2\0\3\0\1\0\2\0\27\0\252\0"+
    "\26\0\12\0\32\0\106\0\70\0\6\0\2\0\100\0\1\0\3\0"+
    "\1\0\2\0\5\0\4\0\4\0\1\0\3\0\1\0\33\0\4\0"+
    "\3\0\4\0\1\0\40\0\35\0\203\0\66\0\12\0\26\0\12\0"+
    "\23\0\215\0\111\0\u03b7\0\3\0\65\0\17\0\37\0\12\0\20\0"+
    "\3\0\55\0\13\0\2\0\1\0\22\0\31\0\7\0\12\0\6\0"+
    "\3\0\44\0\16\0\1\0\12\0\100\0\3\0\60\0\16\0\4\0"+
    "\13\0\12\0\u04a6\0\53\0\15\0\10\0\12\0\u0936\0\u036f\0\221\0"+
    "\143\0\u0b9d\0\u042f\0\u33d1\0\u0239\0\u04c7\0\105\0\13\0\1\0\56\0"+
    "\20\0\4\0\15\0\u4060\0\2\0\u2163\0\5\0\3\0\26\0\2\0"+
    "\7\0\36\0\4\0\224\0\3\0\u01bb\0\125\0\1\0\107\0\1\0"+
    "\2\0\2\0\1\0\2\0\2\0\2\0\4\0\1\0\14\0\1\0"+
    "\1\0\1\0\7\0\1\0\101\0\1\0\4\0\2\0\10\0\1\0"+
    "\7\0\1\0\34\0\1\0\4\0\1\0\5\0\1\0\1\0\3\0"+
    "\7\0\1\0\u0154\0\2\0\31\0\1\0\31\0\1\0\37\0\1\0"+
    "\31\0\1\0\37\0\1\0\31\0\1\0\37\0\1\0\31\0\1\0"+
    "\37\0\1\0\31\0\1\0\10\0\2\0\62\0\u1600\0\4\0\1\0"+
    "\33\0\1\0\2\0\1\0\1\0\2\0\1\0\1\0\12\0\1\0"+
    "\4\0\1\0\1\0\1\0\1\0\6\0\1\0\4\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\3\0\1\0\2\0\1\0\1\0\2\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\2\0\1\0\1\0\2\0\4\0\1\0\7\0\1\0\4\0\1\0"+
    "\4\0\1\0\1\0\1\0\12\0\1\0\21\0\5\0\3\0\1\0"+
    "\5\0\1\0\21\0\u1144\0\ua6d7\0\51\0\u1035\0\13\0\336\0\u3fe2\0"+
    "\u021e\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\0\36\0\140\0\200\0\360\0\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\6\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\1\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\6\1\1\5\14\1\1\30\1\0"+
    "\1\31\2\0\1\32\2\0\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\15\0\1\42\12\0\1\30\1\43"+
    "\4\0\1\44\1\45\10\0\1\46\4\0\1\47\3\0"+
    "\1\50\6\0\1\51\1\0\1\52\1\32\1\0\1\53"+
    "\1\54\3\0\1\55\4\0\1\56\3\0\1\57\7\0"+
    "\1\60\4\0\1\61\6\0\1\62\1\0\1\63\1\64"+
    "\1\0\1\65\3\0\1\66\3\0\1\67\1\0\1\70"+
    "\3\0\1\71\1\72\3\0\1\73\1\74\3\0\1\75"+
    "\1\0\1\76\2\0\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\77\0\275\0\374\0\u013b\0\u017a"+
    "\0\77\0\275\0\u01b9\0\u01f8\0\u01f8\0\77\0\u0237\0\u0276"+
    "\0\u02b5\0\u02f4\0\u0333\0\77\0\77\0\u0372\0\77\0\77"+
    "\0\77\0\u03b1\0\77\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc"+
    "\0\77\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\u0a56\0\u0a95\0\u0ad4"+
    "\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc"+
    "\0\u0d0b\0\u0d4a\0\77\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85"+
    "\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\77\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\u10fb\0\u09d8\0\u0a56\0\u113a\0\u1179\0\u11b8"+
    "\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\77\0\u1332\0\u1371"+
    "\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569"+
    "\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\77\0\u16e3\0\77"+
    "\0\u1722\0\u1722\0\77\0\77\0\u1761\0\u17a0\0\u17df\0\77"+
    "\0\u181e\0\u185d\0\u189c\0\u18db\0\77\0\u191a\0\u1959\0\u1998"+
    "\0\77\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51"+
    "\0\77\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\77\0\u1c8c\0\u1ccb"+
    "\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\77\0\u1e06\0\77\0\77"+
    "\0\u1e45\0\77\0\u1e84\0\u1ec3\0\u1f02\0\77\0\u1f41\0\u1f80"+
    "\0\u1fbf\0\77\0\u1ffe\0\77\0\u203d\0\u207c\0\u20bb\0\77"+
    "\0\77\0\u20fa\0\u2139\0\u2178\0\77\0\77\0\u21b7\0\u21f6"+
    "\0\u2235\0\77\0\u2274\0\77\0\u22b3\0\u22f2\0\77\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\12\1\5\1\13\3\2\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\2"+
    "\1\37\1\40\3\2\1\41\1\42\1\2\1\43\1\44"+
    "\2\2\1\45\1\46\1\2\1\47\1\50\1\51\1\2"+
    "\1\52\1\2\1\53\1\54\1\55\2\2\1\56\1\2"+
    "\100\0\1\57\1\60\77\0\1\12\4\0\3\12\70\0"+
    "\1\61\77\0\2\42\4\0\1\42\25\0\1\62\7\0"+
    "\1\42\7\0\1\63\23\0\1\10\4\0\1\10\14\0"+
    "\1\64\54\0\1\10\4\0\1\10\1\65\1\0\1\65"+
    "\11\0\1\64\54\0\1\66\4\0\1\66\106\0\1\67"+
    "\76\0\1\70\76\0\1\71\76\0\1\72\101\0\1\73"+
    "\102\0\1\74\102\0\1\75\40\0\3\76\1\0\4\76"+
    "\1\0\66\76\41\0\1\77\25\0\1\100\52\0\1\101"+
    "\47\0\1\102\35\0\1\103\71\0\1\104\102\0\1\105"+
    "\7\0\1\106\22\0\2\42\4\0\1\42\35\0\1\42"+
    "\65\0\1\107\113\0\1\110\64\0\1\111\114\0\1\112"+
    "\65\0\1\113\13\0\1\114\3\0\1\115\67\0\1\116"+
    "\57\0\1\117\1\120\105\0\1\121\75\0\1\122\66\0"+
    "\1\123\124\0\1\124\52\0\1\125\33\0\3\57\1\126"+
    "\4\57\1\126\66\57\2\127\1\130\74\127\43\0\1\131"+
    "\114\0\1\132\23\0\1\64\4\0\1\64\27\0\1\133"+
    "\3\0\1\133\34\0\2\134\4\0\1\134\1\0\1\134"+
    "\25\0\1\134\3\0\3\134\2\0\2\134\5\0\1\134"+
    "\2\0\1\134\7\0\1\134\6\0\1\66\4\0\1\66"+
    "\14\0\1\64\46\0\3\76\1\0\4\76\1\0\26\76"+
    "\1\135\37\76\42\0\1\136\116\0\1\137\54\0\1\140"+
    "\10\0\1\141\65\0\1\142\111\0\1\143\71\0\1\144"+
    "\102\0\1\145\65\0\1\146\76\0\1\147\113\0\1\150"+
    "\60\0\1\151\120\0\1\152\54\0\1\153\127\0\1\154"+
    "\47\0\1\155\106\0\1\156\116\0\1\157\55\0\1\160"+
    "\77\0\1\161\106\0\1\162\76\0\1\163\54\0\1\164"+
    "\36\0\2\127\1\165\74\127\1\0\1\166\1\130\145\0"+
    "\1\167\77\0\1\170\32\0\1\171\4\0\1\171\3\0"+
    "\2\172\121\0\1\173\106\0\1\174\65\0\1\175\117\0"+
    "\1\176\56\0\1\177\76\0\1\200\102\0\1\173\102\0"+
    "\1\201\105\0\1\202\73\0\1\203\115\0\1\204\63\0"+
    "\1\205\56\0\1\206\105\0\1\207\31\0\1\210\143\0"+
    "\1\211\75\0\1\212\100\0\1\213\75\0\1\214\110\0"+
    "\1\215\64\0\1\216\122\0\1\217\1\220\1\166\1\165"+
    "\74\220\73\0\1\221\11\0\1\171\4\0\1\171\124\0"+
    "\1\222\107\0\1\223\7\0\1\224\100\0\1\225\55\0"+
    "\1\226\117\0\1\227\61\0\1\226\123\0\1\230\43\0"+
    "\1\231\100\0\1\232\105\0\1\233\65\0\1\234\110\0"+
    "\1\235\104\0\1\236\55\0\1\237\101\0\1\240\127\0"+
    "\1\241\2\0\2\220\1\165\74\220\64\0\1\242\74\0"+
    "\1\243\100\0\1\244\75\0\1\245\100\0\1\246\51\0"+
    "\1\247\106\0\1\250\116\0\1\251\51\0\1\252\74\0"+
    "\1\253\123\0\1\254\50\0\1\255\122\0\1\256\52\0"+
    "\1\257\111\0\1\260\66\0\1\261\104\0\1\262\70\0"+
    "\1\263\104\0\1\264\70\0\1\265\76\0\1\266\76\0"+
    "\1\267\121\0\1\270\74\0\1\271\106\0\1\272\67\0"+
    "\1\273\54\0\1\274\73\0\1\275\101\0\1\276\106\0"+
    "\1\277\64\0\1\300\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9009];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\4\1\1\11\4\1\1\11"+
    "\5\1\2\11\1\1\3\11\1\1\1\11\24\1\1\0"+
    "\1\11\2\0\1\1\2\0\7\11\15\0\1\11\12\0"+
    "\1\11\1\1\4\0\2\1\10\0\1\11\4\0\1\1"+
    "\3\0\1\1\6\0\1\11\1\0\1\11\1\1\1\0"+
    "\2\11\3\0\1\11\4\0\1\11\3\0\1\11\7\0"+
    "\1\11\4\0\1\11\6\0\1\11\1\0\2\11\1\0"+
    "\1\11\3\0\1\11\3\0\1\11\1\0\1\11\3\0"+
    "\2\11\3\0\2\11\3\0\1\11\1\0\1\11\2\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public String lexeme;
        
        private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2902) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext(); line = (yyline + 1); column = (yycolumn + 1); length = yylength(); 
                                                                    System.out.print("Lexical error: invalid token ");
            }
          case 65: break;
          case 2: 
            { return symbol(sym.DIV, new String(yytext()));
            }
          case 66: break;
          case 3: 
            { return symbol(sym.MULT, new String(yytext()));
            }
          case 67: break;
          case 4: 
            { /*lleva la cuenta de lineas*/
            }
          case 68: break;
          case 5: 
            { if(yylength() > 31)
                                                                    {
                                                                        String aux = yytext().substring(0,31);
                                                                        
                                                                        //return "IDENTIFIER: " + aux + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1) + " exceeded the max limit length. Identifier truncated.";                                                                       
                                                                        return symbol(sym.IDENT, new String(aux));
                                                                    }
                                                                    else 
                                                                    {
                                                                        //return "IDENTIFIER: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                        return symbol(sym.IDENT, new String("IDENTIFIER: " + yytext()));
                                                                    }
            }
          case 69: break;
          case 6: 
            { //return "INTEGER: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                    return symbol(sym.INTCONSTANT, new Integer(yytext()));
            }
          case 70: break;
          case 7: 
            { return symbol(sym.COMA, new String(yytext()));
            }
          case 71: break;
          case 8: 
            { /*se ignoran los espacios y tabuladores*/
            }
          case 72: break;
          case 9: 
            { return symbol(sym.ADD, new String(yytext()));
            }
          case 73: break;
          case 10: 
            { return symbol(sym.SUBSTRACTION, new String(yytext()));
            }
          case 74: break;
          case 11: 
            { return symbol(sym.MOD, new String(yytext()));
            }
          case 75: break;
          case 12: 
            { return symbol(sym.MINUS, new String(yytext()));
            }
          case 76: break;
          case 13: 
            { return symbol(sym.ASSIGN, new String(yytext()));
            }
          case 77: break;
          case 14: 
            { return symbol(sym.GREATER, new String(yytext()));
            }
          case 78: break;
          case 15: 
            { return symbol(sym.NOT, new String(yytext()));
            }
          case 79: break;
          case 16: 
            { return symbol(sym.SEMI_COLON, new String(yytext()));
            }
          case 80: break;
          case 17: 
            { return symbol(sym.POINT, new String(yytext()));
            }
          case 81: break;
          case 18: 
            { return symbol(sym.SB_LEFT, new String(yytext()));
            }
          case 82: break;
          case 19: 
            { return symbol(sym.SB_RIGHT, new String(yytext()));
            }
          case 83: break;
          case 20: 
            { return symbol(sym.PAR_LEFT, new String(yytext()));
            }
          case 84: break;
          case 21: 
            { return symbol(sym.PAR_RIGHT, new String(yytext()));
            }
          case 85: break;
          case 22: 
            { return symbol(sym.BRACKET_LEFT, new String(yytext()));
            }
          case 86: break;
          case 23: 
            { return symbol(sym.BRACKET_RIGHT, new String(yytext()));
            }
          case 87: break;
          case 24: 
            { /*se ignoran los comentarios de linea*/
            }
          case 88: break;
          case 25: 
            { return symbol(sym.OR, new String(yytext()));
            }
          case 89: break;
          case 26: 
            { //return "DOUBLE: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                                            return symbol(sym.DOUBLECONSTANT, new String("DOUBLE: " + yytext()));
            }
          case 90: break;
          case 27: 
            { return symbol(sym.MINUS_EQUAL, new String(yytext()));
            }
          case 91: break;
          case 28: 
            { return symbol(sym.EQUAL, new String(yytext()));
            }
          case 92: break;
          case 29: 
            { return symbol(sym.GREATER_EQUAL, new String(yytext()));
            }
          case 93: break;
          case 30: 
            { return symbol(sym.DIFFERENT, new String(yytext()));
            }
          case 94: break;
          case 31: 
            { return symbol(sym.AND, new String(yytext()));
            }
          case 95: break;
          case 32: 
            { return symbol(sym.SBCHETES, new String(yytext()));
            }
          case 96: break;
          case 33: 
            { return symbol(sym.BRACKETS, new String(yytext()));
            }
          case 97: break;
          case 34: 
            { return symbol(sym.IF, new String(yytext()));
            }
          case 98: break;
          case 35: 
            { //return "Unfinished comment " + yytext() + " found in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                    System.out.print("Unfinished comment " + yytext() + " found in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1));
            }
          case 99: break;
          case 36: 
            { //return "INTEGER HEXADECIMAL: " + yytext() + " in line: " + yyline + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                return symbol(sym.HEXADECIMAL, new String(yytext()));
            }
          case 100: break;
          case 37: 
            { /*return "STRING: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);*/
                                                                        return symbol(sym.STRING, new String(yytext()));
            }
          case 101: break;
          case 38: 
            { return symbol(sym.FOR, new String(yytext()));
            }
          case 102: break;
          case 39: 
            { return symbol(sym.INT, new String(yytext()));
            }
          case 103: break;
          case 40: 
            { return symbol(sym.NEW, new String(yytext()));
            }
          case 104: break;
          case 41: 
            { /*se ignoran los comentarios de bloque*/
            }
          case 105: break;
          case 42: 
            { return symbol(sym.BOOL, new String(yytext()));
            }
          case 106: break;
          case 43: 
            { /*return "BOOLEAN: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);*/ 
                                                                        return symbol(sym.TRUE, new String(yytext()));
            }
          case 107: break;
          case 44: 
            { return symbol(sym.THIS, new String(yytext()));
            }
          case 108: break;
          case 45: 
            { return symbol(sym.ELSE, new String(yytext()));
            }
          case 109: break;
          case 46: 
            { return symbol(sym.VOID, new String(yytext()));
            }
          case 110: break;
          case 47: 
            { return symbol(sym.NULL, new String(yytext()));
            }
          case 111: break;
          case 48: 
            { return symbol(sym.BREAK, new String(yytext()));
            }
          case 112: break;
          case 49: 
            { /*return "BOOLEAN: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);*/ 
                                                                        return symbol(sym.FALSE, new String(yytext()));
            }
          case 113: break;
          case 50: 
            { return symbol(sym.CLASS, new String(yytext()));
            }
          case 114: break;
          case 51: 
            { return symbol(sym.PRINT, new String(yytext()));
            }
          case 115: break;
          case 52: 
            { return symbol(sym.WHILE, new String(yytext()));
            }
          case 116: break;
          case 53: 
            { return symbol(sym.RETURN, new String(yytext()));
            }
          case 117: break;
          case 54: 
            { return symbol(sym.STRING, new String(yytext()));
            }
          case 118: break;
          case 55: 
            { return symbol(sym.DOUBLE, new String(yytext()));
            }
          case 119: break;
          case 56: 
            { return symbol(sym.MALLOC, new String(yytext()));
            }
          case 120: break;
          case 57: 
            { return symbol(sym.EXTENDS, new String(yytext()));
            }
          case 121: break;
          case 58: 
            { return symbol(sym.SETBYTE, new String(yytext()));
            }
          case 122: break;
          case 59: 
            { return symbol(sym.GETBYTE, new String(yytext()));
            }
          case 123: break;
          case 60: 
            { return symbol(sym.READLINE, new String(yytext()));
            }
          case 124: break;
          case 61: 
            { return symbol(sym.NEWARRAY, new String(yytext()));
            }
          case 125: break;
          case 62: 
            { return symbol(sym.INTERFACE, new String(yytext()));
            }
          case 126: break;
          case 63: 
            { return symbol(sym.IMPLEMENTS, new String(yytext()));
            }
          case 127: break;
          case 64: 
            { return symbol(sym.READINTEGER, new String(yytext()));
            }
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
